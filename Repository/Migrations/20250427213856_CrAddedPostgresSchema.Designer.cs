// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SimpleCleanArch.Repository.Context;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250427213856_CrAddedPostgresSchema")]
    partial class CrAddedPostgresSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SimpleCleanArch.Repository.Schema.EmployeeSchema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("document");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("SimpleCleanArch.Repository.Schema.InventorySchema", b =>
                {
                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer")
                        .HasColumnName("warehouse_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("WarehouseId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("inventories");
                });

            modelBuilder.Entity("SimpleCleanArch.Repository.Schema.ProductSchema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("products");
                });

            modelBuilder.Entity("SimpleCleanArch.Repository.Schema.ProductVariantSchema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("size");

                    b.Property<string>("Sku")
                        .HasColumnType("text")
                        .HasColumnName("sku");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("Sku")
                        .IsUnique();

                    b.ToTable("product_variants");
                });

            modelBuilder.Entity("SimpleCleanArch.Repository.Schema.ProjectSchema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("SimpleCleanArch.Repository.Schema.WarehouseDetailsSchema", b =>
                {
                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer")
                        .HasColumnName("warehouse_id");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("WarehouseId");

                    b.ToTable("warehouse_details");
                });

            modelBuilder.Entity("SimpleCleanArch.Repository.Schema.WarehouseSchema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("warehouses");
                });

            modelBuilder.Entity("SimpleCleanArch.Repository.Schema.WarehouseTransferDetailsSchema", b =>
                {
                    b.Property<int>("WarehouseTransferId")
                        .HasColumnType("integer")
                        .HasColumnName("warehouse_transfer_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("product_quantity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("WarehouseTransferId");

                    b.ToTable("warehouse_transfer_details");
                });

            modelBuilder.Entity("SimpleCleanArch.Repository.Schema.WarehouseTransferSchema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("SourceWarehouseId")
                        .HasColumnType("integer")
                        .HasColumnName("source_warehouse_id");

                    b.Property<int>("TargetWarehouseId")
                        .HasColumnType("integer")
                        .HasColumnName("target_warehouse_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SourceWarehouseId");

                    b.HasIndex("TargetWarehouseId");

                    b.ToTable("warehouse_transfers");
                });

            modelBuilder.Entity("employees_projects", b =>
                {
                    b.Property<int>("employee_id")
                        .HasColumnType("integer");

                    b.Property<int>("project_id")
                        .HasColumnType("integer");

                    b.HasKey("employee_id", "project_id");

                    b.HasIndex("project_id");

                    b.ToTable("employees_projects");
                });

            modelBuilder.Entity("SimpleCleanArch.Repository.Schema.InventorySchema", b =>
                {
                    b.HasOne("SimpleCleanArch.Repository.Schema.ProductSchema", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleCleanArch.Repository.Schema.WarehouseSchema", null)
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleCleanArch.Repository.Schema.ProductVariantSchema", b =>
                {
                    b.HasOne("SimpleCleanArch.Repository.Schema.ProductSchema", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SimpleCleanArch.Repository.Schema.WarehouseDetailsSchema", b =>
                {
                    b.HasOne("SimpleCleanArch.Repository.Schema.WarehouseSchema", "Warehouse")
                        .WithOne("Details")
                        .HasForeignKey("SimpleCleanArch.Repository.Schema.WarehouseDetailsSchema", "WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("SimpleCleanArch.Repository.Schema.WarehouseTransferDetailsSchema", b =>
                {
                    b.HasOne("SimpleCleanArch.Repository.Schema.WarehouseTransferSchema", "WarehouseTransfer")
                        .WithOne("Details")
                        .HasForeignKey("SimpleCleanArch.Repository.Schema.WarehouseTransferDetailsSchema", "WarehouseTransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WarehouseTransfer");
                });

            modelBuilder.Entity("SimpleCleanArch.Repository.Schema.WarehouseTransferSchema", b =>
                {
                    b.HasOne("SimpleCleanArch.Repository.Schema.ProductSchema", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleCleanArch.Repository.Schema.WarehouseSchema", "SourceWarehouse")
                        .WithMany()
                        .HasForeignKey("SourceWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleCleanArch.Repository.Schema.WarehouseSchema", "TargetWarehouse")
                        .WithMany()
                        .HasForeignKey("TargetWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SourceWarehouse");

                    b.Navigation("TargetWarehouse");
                });

            modelBuilder.Entity("employees_projects", b =>
                {
                    b.HasOne("SimpleCleanArch.Repository.Schema.EmployeeSchema", null)
                        .WithMany()
                        .HasForeignKey("employee_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleCleanArch.Repository.Schema.ProjectSchema", null)
                        .WithMany()
                        .HasForeignKey("project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleCleanArch.Repository.Schema.ProductSchema", b =>
                {
                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("SimpleCleanArch.Repository.Schema.WarehouseSchema", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("SimpleCleanArch.Repository.Schema.WarehouseTransferSchema", b =>
                {
                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
